<?php
/**
 * Wheel
 *
 * PHP version 5
 *
 * @category Class
 * @package  WsApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wheel Fitment API
 *
 * The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.
 *
 * OpenAPI spec version: v1
 * Contact: info@wheel-size.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WsApiClient\Model;

use \ArrayAccess;
use \WsApiClient\ObjectSerializer;

/**
 * Wheel Class Doc Comment
 *
 * @category Class
 * @package  WsApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Wheel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Wheel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tire_pressure' => '\WsApiClient\Model\Pressure',
        'rim' => 'string',
        'rim_diameter' => 'float',
        'rim_width' => 'float',
        'rim_offset' => 'float',
        'tire' => 'string',
        'tire_sizing_system' => 'string',
        'tire_construction' => 'string',
        'tire_width' => 'float',
        'tire_aspect_ratio' => 'float',
        'tire_diameter' => 'float',
        'tire_section_width' => 'float',
        'tire_is_82series' => 'bool',
        'load_index' => 'int',
        'speed_index' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tire_pressure' => null,
        'rim' => null,
        'rim_diameter' => null,
        'rim_width' => null,
        'rim_offset' => null,
        'tire' => null,
        'tire_sizing_system' => null,
        'tire_construction' => null,
        'tire_width' => null,
        'tire_aspect_ratio' => null,
        'tire_diameter' => null,
        'tire_section_width' => null,
        'tire_is_82series' => null,
        'load_index' => null,
        'speed_index' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tire_pressure' => 'tire_pressure',
        'rim' => 'rim',
        'rim_diameter' => 'rim_diameter',
        'rim_width' => 'rim_width',
        'rim_offset' => 'rim_offset',
        'tire' => 'tire',
        'tire_sizing_system' => 'tire_sizing_system',
        'tire_construction' => 'tire_construction',
        'tire_width' => 'tire_width',
        'tire_aspect_ratio' => 'tire_aspect_ratio',
        'tire_diameter' => 'tire_diameter',
        'tire_section_width' => 'tire_section_width',
        'tire_is_82series' => 'tire_is_82series',
        'load_index' => 'load_index',
        'speed_index' => 'speed_index'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tire_pressure' => 'setTirePressure',
        'rim' => 'setRim',
        'rim_diameter' => 'setRimDiameter',
        'rim_width' => 'setRimWidth',
        'rim_offset' => 'setRimOffset',
        'tire' => 'setTire',
        'tire_sizing_system' => 'setTireSizingSystem',
        'tire_construction' => 'setTireConstruction',
        'tire_width' => 'setTireWidth',
        'tire_aspect_ratio' => 'setTireAspectRatio',
        'tire_diameter' => 'setTireDiameter',
        'tire_section_width' => 'setTireSectionWidth',
        'tire_is_82series' => 'setTireIs82series',
        'load_index' => 'setLoadIndex',
        'speed_index' => 'setSpeedIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tire_pressure' => 'getTirePressure',
        'rim' => 'getRim',
        'rim_diameter' => 'getRimDiameter',
        'rim_width' => 'getRimWidth',
        'rim_offset' => 'getRimOffset',
        'tire' => 'getTire',
        'tire_sizing_system' => 'getTireSizingSystem',
        'tire_construction' => 'getTireConstruction',
        'tire_width' => 'getTireWidth',
        'tire_aspect_ratio' => 'getTireAspectRatio',
        'tire_diameter' => 'getTireDiameter',
        'tire_section_width' => 'getTireSectionWidth',
        'tire_is_82series' => 'getTireIs82series',
        'load_index' => 'getLoadIndex',
        'speed_index' => 'getSpeedIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIRE_SIZING_SYSTEM_METRIC = 'metric';
    const TIRE_SIZING_SYSTEM_FLOTATION = 'flotation';
    const TIRE_SIZING_SYSTEM_LT_METRIC = 'lt-metric';
    const TIRE_SIZING_SYSTEM_LT_NUMERIC = 'lt-numeric';
    const TIRE_CONSTRUCTION_R = 'R';
    const TIRE_CONSTRUCTION_B = 'B';
    const TIRE_CONSTRUCTION_D = 'D';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTireSizingSystemAllowableValues()
    {
        return [
            self::TIRE_SIZING_SYSTEM_METRIC,
            self::TIRE_SIZING_SYSTEM_FLOTATION,
            self::TIRE_SIZING_SYSTEM_LT_METRIC,
            self::TIRE_SIZING_SYSTEM_LT_NUMERIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTireConstructionAllowableValues()
    {
        return [
            self::TIRE_CONSTRUCTION_R,
            self::TIRE_CONSTRUCTION_B,
            self::TIRE_CONSTRUCTION_D,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tire_pressure'] = isset($data['tire_pressure']) ? $data['tire_pressure'] : null;
        $this->container['rim'] = isset($data['rim']) ? $data['rim'] : null;
        $this->container['rim_diameter'] = isset($data['rim_diameter']) ? $data['rim_diameter'] : null;
        $this->container['rim_width'] = isset($data['rim_width']) ? $data['rim_width'] : null;
        $this->container['rim_offset'] = isset($data['rim_offset']) ? $data['rim_offset'] : null;
        $this->container['tire'] = isset($data['tire']) ? $data['tire'] : null;
        $this->container['tire_sizing_system'] = isset($data['tire_sizing_system']) ? $data['tire_sizing_system'] : null;
        $this->container['tire_construction'] = isset($data['tire_construction']) ? $data['tire_construction'] : null;
        $this->container['tire_width'] = isset($data['tire_width']) ? $data['tire_width'] : null;
        $this->container['tire_aspect_ratio'] = isset($data['tire_aspect_ratio']) ? $data['tire_aspect_ratio'] : null;
        $this->container['tire_diameter'] = isset($data['tire_diameter']) ? $data['tire_diameter'] : null;
        $this->container['tire_section_width'] = isset($data['tire_section_width']) ? $data['tire_section_width'] : null;
        $this->container['tire_is_82series'] = isset($data['tire_is_82series']) ? $data['tire_is_82series'] : null;
        $this->container['load_index'] = isset($data['load_index']) ? $data['load_index'] : null;
        $this->container['speed_index'] = isset($data['speed_index']) ? $data['speed_index'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTireSizingSystemAllowableValues();
        if (!is_null($this->container['tire_sizing_system']) && !in_array($this->container['tire_sizing_system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tire_sizing_system', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTireConstructionAllowableValues();
        if (!is_null($this->container['tire_construction']) && !in_array($this->container['tire_construction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tire_construction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getTireSizingSystemAllowableValues();
        if (!is_null($this->container['tire_sizing_system']) && !in_array($this->container['tire_sizing_system'], $allowedValues, true)) {
            return false;
        }
        $allowedValues = $this->getTireConstructionAllowableValues();
        if (!is_null($this->container['tire_construction']) && !in_array($this->container['tire_construction'], $allowedValues, true)) {
            return false;
        }
        return true;
    }


    /**
     * Gets tire_pressure
     *
     * @return \WsApiClient\Model\Pressure
     */
    public function getTirePressure()
    {
        return $this->container['tire_pressure'];
    }

    /**
     * Sets tire_pressure
     *
     * @param \WsApiClient\Model\Pressure $tire_pressure tire_pressure
     *
     * @return $this
     */
    public function setTirePressure($tire_pressure)
    {
        $this->container['tire_pressure'] = $tire_pressure;

        return $this;
    }

    /**
     * Gets rim
     *
     * @return string
     */
    public function getRim()
    {
        return $this->container['rim'];
    }

    /**
     * Sets rim
     *
     * @param string $rim Formatter rim size (e.g. `7Jx18 ET38`, can be __*`\"\"`*__)
     *
     * @return $this
     */
    public function setRim($rim)
    {
        $this->container['rim'] = $rim;

        return $this;
    }

    /**
     * Gets rim_diameter
     *
     * @return float
     */
    public function getRimDiameter()
    {
        return $this->container['rim_diameter'];
    }

    /**
     * Sets rim_diameter
     *
     * @param float $rim_diameter Rim diameter, in (e.g. `18.0`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setRimDiameter($rim_diameter)
    {
        $this->container['rim_diameter'] = $rim_diameter;

        return $this;
    }

    /**
     * Gets rim_width
     *
     * @return float
     */
    public function getRimWidth()
    {
        return $this->container['rim_width'];
    }

    /**
     * Sets rim_width
     *
     * @param float $rim_width Rim width, in (e.g. `7.0`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setRimWidth($rim_width)
    {
        $this->container['rim_width'] = $rim_width;

        return $this;
    }

    /**
     * Gets rim_offset
     *
     * @return float
     */
    public function getRimOffset()
    {
        return $this->container['rim_offset'];
    }

    /**
     * Sets rim_offset
     *
     * @param float $rim_offset Rim offset, mm (e.g. `38.0`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setRimOffset($rim_offset)
    {
        $this->container['rim_offset'] = $rim_offset;

        return $this;
    }

    /**
     * Gets tire
     *
     * @return string
     */
    public function getTire()
    {
        return $this->container['tire'];
    }

    /**
     * Sets tire
     *
     * @param string $tire Formatted tire size (e.g. `225/55R18`, can be __*`\"\"`*__)
     *
     * @return $this
     */
    public function setTire($tire)
    {
        $this->container['tire'] = $tire;

        return $this;
    }

    /**
     * Gets tire_sizing_system
     *
     * @return string
     */
    public function getTireSizingSystem()
    {
        return $this->container['tire_sizing_system'];
    }

    /**
     * Sets tire_sizing_system
     *
     * @param string $tire_sizing_system Tire sizing system (e.g. `metric`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setTireSizingSystem($tire_sizing_system)
    {
        $allowedValues = $this->getTireSizingSystemAllowableValues();
        if (!is_null($tire_sizing_system) && !in_array($tire_sizing_system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tire_sizing_system', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tire_sizing_system'] = $tire_sizing_system;

        return $this;
    }

    /**
     * Gets tire_construction
     *
     * @return string
     */
    public function getTireConstruction()
    {
        return $this->container['tire_construction'];
    }

    /**
     * Sets tire_construction
     *
     * @param string $tire_construction Tire constriction code (e.g. `R`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setTireConstruction($tire_construction)
    {
        $allowedValues = $this->getTireConstructionAllowableValues();
        if (!is_null($tire_construction) && !in_array($tire_construction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tire_construction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tire_construction'] = $tire_construction;

        return $this;
    }

    /**
     * Gets tire_width
     *
     * @return float
     */
    public function getTireWidth()
    {
        return $this->container['tire_width'];
    }

    /**
     * Sets tire_width
     *
     * @param float $tire_width Tire width, mm (e.g. `225.0`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setTireWidth($tire_width)
    {
        $this->container['tire_width'] = $tire_width;

        return $this;
    }

    /**
     * Gets tire_aspect_ratio
     *
     * @return float
     */
    public function getTireAspectRatio()
    {
        return $this->container['tire_aspect_ratio'];
    }

    /**
     * Sets tire_aspect_ratio
     *
     * @param float $tire_aspect_ratio Aspect ratio, % (e.g. `55.0`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setTireAspectRatio($tire_aspect_ratio)
    {
        $this->container['tire_aspect_ratio'] = $tire_aspect_ratio;

        return $this;
    }

    /**
     * Gets tire_diameter
     *
     * @return float
     */
    public function getTireDiameter()
    {
        return $this->container['tire_diameter'];
    }

    /**
     * Sets tire_diameter
     *
     * @param float $tire_diameter High flotation tire diameter, in (e.g. `31.0`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setTireDiameter($tire_diameter)
    {
        $this->container['tire_diameter'] = $tire_diameter;

        return $this;
    }

    /**
     * Gets tire_section_width
     *
     * @return float
     */
    public function getTireSectionWidth()
    {
        return $this->container['tire_section_width'];
    }

    /**
     * Sets tire_section_width
     *
     * @param float $tire_section_width High flotation section width, in (e.g. `10.5`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setTireSectionWidth($tire_section_width)
    {
        $this->container['tire_section_width'] = $tire_section_width;

        return $this;
    }

    /**
     * Gets tire_is_82series
     *
     * @return bool
     */
    public function getTireIs82series()
    {
        return $this->container['tire_is_82series'];
    }

    /**
     * Sets tire_is_82series
     *
     * @param bool $tire_is_82series Is an old tire with assumed aspect ratio 82%
     *
     * @return $this
     */
    public function setTireIs82series($tire_is_82series)
    {
        $this->container['tire_is_82series'] = $tire_is_82series;

        return $this;
    }

    /**
     * Gets load_index
     *
     * @return int
     */
    public function getLoadIndex()
    {
        return $this->container['load_index'];
    }

    /**
     * Sets load_index
     *
     * @param int $load_index Load index (e.g. `98`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setLoadIndex($load_index)
    {
        $this->container['load_index'] = $load_index;

        return $this;
    }

    /**
     * Gets speed_index
     *
     * @return string
     */
    public function getSpeedIndex()
    {
        return $this->container['speed_index'];
    }

    /**
     * Sets speed_index
     *
     * @param string $speed_index Speed rating (e.g. `H`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setSpeedIndex($speed_index)
    {
        $this->container['speed_index'] = $speed_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


