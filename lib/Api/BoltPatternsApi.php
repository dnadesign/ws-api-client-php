<?php
/**
 * BoltPatternsApi
 * PHP version 5
 *
 * @category Class
 * @package  WsApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wheel Fitment API
 *
 * The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.
 *
 * OpenAPI spec version: v1
 * Contact: info@wheel-size.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WsApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;

use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WsApiClient\ApiException;
use WsApiClient\Configuration;
use WsApiClient\HeaderSelector;
use WsApiClient\ObjectSerializer;

/**
 * BoltPatternsApi Class Doc Comment
 *
 * @category Class
 * @package  WsApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BoltPatternsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation boltPatternsList
     *
     * Get list of bolt patterns
     *
     * @param  float $stud Number of stud holes (e.g. &#x60;5&#x60;) (optional)
     * @param  float $stud_min Lower bound for number of stud holes (e.g. &#x60;4&#x60;) (optional)
     * @param  float $stud_max Upper bound for number of stud holes (e.g. &#x60;7&#x60;) (optional)
     * @param  float $pcd Pitch circle diameter, mm (e.g. &#x60;115&#x60;) (optional)
     * @param  float $pcd_min Lower bound for pitch circle diameter, mm (e.g. &#x60;105&#x60;) (optional)
     * @param  float $pcd_max Upper bound for pitch circle diameter, mm (e.g. &#x60;135&#x60;) (optional)
     * @param  string $brands Show information only for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Don&#39;t show information for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     * @param  string $countries Show information for local manufacturers from specified countries only. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;us,gb,jp&#x60;) (optional)
     * @param  string $countries_exclude Don&#39;t show information for local manufacturers from specified countries. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;ru,ua&#x60;) (optional)
     *
     * @throws \WsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WsApiClient\Model\BoltPattern[]
     */
    public function boltPatternsList($stud = null, $stud_min = null, $stud_max = null, $pcd = null, $pcd_min = null, $pcd_max = null, $brands = null, $brands_exclude = null, $countries = null, $countries_exclude = null)
    {
        list($response) = $this->boltPatternsListWithHttpInfo($stud, $stud_min, $stud_max, $pcd, $pcd_min, $pcd_max, $brands, $brands_exclude, $countries, $countries_exclude);
        return $response;
    }

    /**
     * Operation boltPatternsListWithHttpInfo
     *
     * Get list of bolt patterns
     *
     * @param  float $stud Number of stud holes (e.g. &#x60;5&#x60;) (optional)
     * @param  float $stud_min Lower bound for number of stud holes (e.g. &#x60;4&#x60;) (optional)
     * @param  float $stud_max Upper bound for number of stud holes (e.g. &#x60;7&#x60;) (optional)
     * @param  float $pcd Pitch circle diameter, mm (e.g. &#x60;115&#x60;) (optional)
     * @param  float $pcd_min Lower bound for pitch circle diameter, mm (e.g. &#x60;105&#x60;) (optional)
     * @param  float $pcd_max Upper bound for pitch circle diameter, mm (e.g. &#x60;135&#x60;) (optional)
     * @param  string $brands Show information only for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Don&#39;t show information for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     * @param  string $countries Show information for local manufacturers from specified countries only. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;us,gb,jp&#x60;) (optional)
     * @param  string $countries_exclude Don&#39;t show information for local manufacturers from specified countries. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;ru,ua&#x60;) (optional)
     *
     * @throws \WsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WsApiClient\Model\BoltPattern[], HTTP status code, HTTP response headers (array of strings)
     */
    public function boltPatternsListWithHttpInfo($stud = null, $stud_min = null, $stud_max = null, $pcd = null, $pcd_min = null, $pcd_max = null, $brands = null, $brands_exclude = null, $countries = null, $countries_exclude = null)
    {
        $returnType = '\WsApiClient\Model\BoltPattern[]';
        $request = $this->boltPatternsListRequest($stud, $stud_min, $stud_max, $pcd, $pcd_min, $pcd_max, $brands, $brands_exclude, $countries, $countries_exclude);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WsApiClient\Model\BoltPattern[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation boltPatternsListAsync
     *
     * Get list of bolt patterns
     *
     * @param  float $stud Number of stud holes (e.g. &#x60;5&#x60;) (optional)
     * @param  float $stud_min Lower bound for number of stud holes (e.g. &#x60;4&#x60;) (optional)
     * @param  float $stud_max Upper bound for number of stud holes (e.g. &#x60;7&#x60;) (optional)
     * @param  float $pcd Pitch circle diameter, mm (e.g. &#x60;115&#x60;) (optional)
     * @param  float $pcd_min Lower bound for pitch circle diameter, mm (e.g. &#x60;105&#x60;) (optional)
     * @param  float $pcd_max Upper bound for pitch circle diameter, mm (e.g. &#x60;135&#x60;) (optional)
     * @param  string $brands Show information only for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Don&#39;t show information for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     * @param  string $countries Show information for local manufacturers from specified countries only. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;us,gb,jp&#x60;) (optional)
     * @param  string $countries_exclude Don&#39;t show information for local manufacturers from specified countries. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;ru,ua&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function boltPatternsListAsync($stud = null, $stud_min = null, $stud_max = null, $pcd = null, $pcd_min = null, $pcd_max = null, $brands = null, $brands_exclude = null, $countries = null, $countries_exclude = null)
    {
        return $this->boltPatternsListAsyncWithHttpInfo($stud, $stud_min, $stud_max, $pcd, $pcd_min, $pcd_max, $brands, $brands_exclude, $countries, $countries_exclude)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation boltPatternsListAsyncWithHttpInfo
     *
     * Get list of bolt patterns
     *
     * @param  float $stud Number of stud holes (e.g. &#x60;5&#x60;) (optional)
     * @param  float $stud_min Lower bound for number of stud holes (e.g. &#x60;4&#x60;) (optional)
     * @param  float $stud_max Upper bound for number of stud holes (e.g. &#x60;7&#x60;) (optional)
     * @param  float $pcd Pitch circle diameter, mm (e.g. &#x60;115&#x60;) (optional)
     * @param  float $pcd_min Lower bound for pitch circle diameter, mm (e.g. &#x60;105&#x60;) (optional)
     * @param  float $pcd_max Upper bound for pitch circle diameter, mm (e.g. &#x60;135&#x60;) (optional)
     * @param  string $brands Show information only for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Don&#39;t show information for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     * @param  string $countries Show information for local manufacturers from specified countries only. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;us,gb,jp&#x60;) (optional)
     * @param  string $countries_exclude Don&#39;t show information for local manufacturers from specified countries. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;ru,ua&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function boltPatternsListAsyncWithHttpInfo($stud = null, $stud_min = null, $stud_max = null, $pcd = null, $pcd_min = null, $pcd_max = null, $brands = null, $brands_exclude = null, $countries = null, $countries_exclude = null)
    {
        $returnType = '\WsApiClient\Model\BoltPattern[]';
        $request = $this->boltPatternsListRequest($stud, $stud_min, $stud_max, $pcd, $pcd_min, $pcd_max, $brands, $brands_exclude, $countries, $countries_exclude);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'boltPatternsList'
     *
     * @param  float $stud Number of stud holes (e.g. &#x60;5&#x60;) (optional)
     * @param  float $stud_min Lower bound for number of stud holes (e.g. &#x60;4&#x60;) (optional)
     * @param  float $stud_max Upper bound for number of stud holes (e.g. &#x60;7&#x60;) (optional)
     * @param  float $pcd Pitch circle diameter, mm (e.g. &#x60;115&#x60;) (optional)
     * @param  float $pcd_min Lower bound for pitch circle diameter, mm (e.g. &#x60;105&#x60;) (optional)
     * @param  float $pcd_max Upper bound for pitch circle diameter, mm (e.g. &#x60;135&#x60;) (optional)
     * @param  string $brands Show information only for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Don&#39;t show information for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     * @param  string $countries Show information for local manufacturers from specified countries only. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;us,gb,jp&#x60;) (optional)
     * @param  string $countries_exclude Don&#39;t show information for local manufacturers from specified countries. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;ru,ua&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function boltPatternsListRequest($stud = null, $stud_min = null, $stud_max = null, $pcd = null, $pcd_min = null, $pcd_max = null, $brands = null, $brands_exclude = null, $countries = null, $countries_exclude = null)
    {

        $resourcePath = '/bolt-patterns/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($stud !== null) {
            $queryParams['stud'] = ObjectSerializer::toQueryValue($stud);
        }
        // query params
        if ($stud_min !== null) {
            $queryParams['stud_min'] = ObjectSerializer::toQueryValue($stud_min);
        }
        // query params
        if ($stud_max !== null) {
            $queryParams['stud_max'] = ObjectSerializer::toQueryValue($stud_max);
        }
        // query params
        if ($pcd !== null) {
            $queryParams['pcd'] = ObjectSerializer::toQueryValue($pcd);
        }
        // query params
        if ($pcd_min !== null) {
            $queryParams['pcd_min'] = ObjectSerializer::toQueryValue($pcd_min);
        }
        // query params
        if ($pcd_max !== null) {
            $queryParams['pcd_max'] = ObjectSerializer::toQueryValue($pcd_max);
        }
        // query params
        if ($brands !== null) {
            $queryParams['brands'] = ObjectSerializer::toQueryValue($brands);
        }
        // query params
        if ($brands_exclude !== null) {
            $queryParams['brands_exclude'] = ObjectSerializer::toQueryValue($brands_exclude);
        }
        // query params
        if ($countries !== null) {
            $queryParams['countries'] = ObjectSerializer::toQueryValue($countries);
        }
        // query params
        if ($countries_exclude !== null) {
            $queryParams['countries_exclude'] = ObjectSerializer::toQueryValue($countries_exclude);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)\
                $httpBody = Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation boltPatternsRead
     *
     * Model modifications by bolt pattern
     *
     * @param  string $bolt_pattern Bolt pattern combines number of stud holes and pitch circle diameter. Use _**&#x60;GET /bolt-patterns/&#x60;**_ to get possible values (e.g. &#x60;5x105&#x60;) (required)
     * @param  float $rim_diameter Rim diameter, in (e.g. &#x60;16&#x60;) (optional)
     * @param  float $rim_width Rim width, in (e.g. &#x60;7&#x60;) (optional)
     * @param  float $offset Rim offset, mm (e.g. &#x60;40&#x60;) (optional)
     * @param  float $offset_min Lower bound for rim offset, mm (e.g. &#x60;35&#x60;) (optional)
     * @param  float $offset_max Upper bound for rim offset, mm (e.g. &#x60;45&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Lower bound for centre bore value, mm (e.g. &#x60;55&#x60;) (optional)
     * @param  float $cb_max Upper bound for centre bore value, mm (e.g. &#x60;65&#x60;) (optional)
     * @param  string $lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn,zh-tw&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only (optional)
     * @param  string $brands Show information only for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Don&#39;t show information for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     * @param  string $countries Show information for local manufacturers from specified countries only. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;us,gb,jp&#x60;) (optional)
     * @param  string $countries_exclude Don&#39;t show information for local manufacturers from specified countries. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;ru,ua&#x60;) (optional)
     *
     * @throws \WsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WsApiClient\Model\MakeWithModels[]
     */
    public function boltPatternsRead($bolt_pattern, $rim_diameter = null, $rim_width = null, $offset = null, $offset_min = null, $offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $lang = null, $brands = null, $brands_exclude = null, $countries = null, $countries_exclude = null)
    {
        list($response) = $this->boltPatternsReadWithHttpInfo($bolt_pattern, $rim_diameter, $rim_width, $offset, $offset_min, $offset_max, $cb, $cb_min, $cb_max, $lang, $brands, $brands_exclude, $countries, $countries_exclude);
        return $response;
    }

    /**
     * Operation boltPatternsReadWithHttpInfo
     *
     * Model modifications by bolt pattern
     *
     * @param  string $bolt_pattern Bolt pattern combines number of stud holes and pitch circle diameter. Use _**&#x60;GET /bolt-patterns/&#x60;**_ to get possible values (e.g. &#x60;5x105&#x60;) (required)
     * @param  float $rim_diameter Rim diameter, in (e.g. &#x60;16&#x60;) (optional)
     * @param  float $rim_width Rim width, in (e.g. &#x60;7&#x60;) (optional)
     * @param  float $offset Rim offset, mm (e.g. &#x60;40&#x60;) (optional)
     * @param  float $offset_min Lower bound for rim offset, mm (e.g. &#x60;35&#x60;) (optional)
     * @param  float $offset_max Upper bound for rim offset, mm (e.g. &#x60;45&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Lower bound for centre bore value, mm (e.g. &#x60;55&#x60;) (optional)
     * @param  float $cb_max Upper bound for centre bore value, mm (e.g. &#x60;65&#x60;) (optional)
     * @param  string $lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn,zh-tw&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only (optional)
     * @param  string $brands Show information only for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Don&#39;t show information for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     * @param  string $countries Show information for local manufacturers from specified countries only. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;us,gb,jp&#x60;) (optional)
     * @param  string $countries_exclude Don&#39;t show information for local manufacturers from specified countries. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;ru,ua&#x60;) (optional)
     *
     * @throws \WsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WsApiClient\Model\MakeWithModels[], HTTP status code, HTTP response headers (array of strings)
     */
    public function boltPatternsReadWithHttpInfo($bolt_pattern, $rim_diameter = null, $rim_width = null, $offset = null, $offset_min = null, $offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $lang = null, $brands = null, $brands_exclude = null, $countries = null, $countries_exclude = null)
    {
        $returnType = '\WsApiClient\Model\MakeWithModels[]';
        $request = $this->boltPatternsReadRequest($bolt_pattern, $rim_diameter, $rim_width, $offset, $offset_min, $offset_max, $cb, $cb_min, $cb_max, $lang, $brands, $brands_exclude, $countries, $countries_exclude);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WsApiClient\Model\MakeWithModels[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation boltPatternsReadAsync
     *
     * Model modifications by bolt pattern
     *
     * @param  string $bolt_pattern Bolt pattern combines number of stud holes and pitch circle diameter. Use _**&#x60;GET /bolt-patterns/&#x60;**_ to get possible values (e.g. &#x60;5x105&#x60;) (required)
     * @param  float $rim_diameter Rim diameter, in (e.g. &#x60;16&#x60;) (optional)
     * @param  float $rim_width Rim width, in (e.g. &#x60;7&#x60;) (optional)
     * @param  float $offset Rim offset, mm (e.g. &#x60;40&#x60;) (optional)
     * @param  float $offset_min Lower bound for rim offset, mm (e.g. &#x60;35&#x60;) (optional)
     * @param  float $offset_max Upper bound for rim offset, mm (e.g. &#x60;45&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Lower bound for centre bore value, mm (e.g. &#x60;55&#x60;) (optional)
     * @param  float $cb_max Upper bound for centre bore value, mm (e.g. &#x60;65&#x60;) (optional)
     * @param  string $lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn,zh-tw&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only (optional)
     * @param  string $brands Show information only for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Don&#39;t show information for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     * @param  string $countries Show information for local manufacturers from specified countries only. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;us,gb,jp&#x60;) (optional)
     * @param  string $countries_exclude Don&#39;t show information for local manufacturers from specified countries. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;ru,ua&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function boltPatternsReadAsync($bolt_pattern, $rim_diameter = null, $rim_width = null, $offset = null, $offset_min = null, $offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $lang = null, $brands = null, $brands_exclude = null, $countries = null, $countries_exclude = null)
    {
        return $this->boltPatternsReadAsyncWithHttpInfo($bolt_pattern, $rim_diameter, $rim_width, $offset, $offset_min, $offset_max, $cb, $cb_min, $cb_max, $lang, $brands, $brands_exclude, $countries, $countries_exclude)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation boltPatternsReadAsyncWithHttpInfo
     *
     * Model modifications by bolt pattern
     *
     * @param  string $bolt_pattern Bolt pattern combines number of stud holes and pitch circle diameter. Use _**&#x60;GET /bolt-patterns/&#x60;**_ to get possible values (e.g. &#x60;5x105&#x60;) (required)
     * @param  float $rim_diameter Rim diameter, in (e.g. &#x60;16&#x60;) (optional)
     * @param  float $rim_width Rim width, in (e.g. &#x60;7&#x60;) (optional)
     * @param  float $offset Rim offset, mm (e.g. &#x60;40&#x60;) (optional)
     * @param  float $offset_min Lower bound for rim offset, mm (e.g. &#x60;35&#x60;) (optional)
     * @param  float $offset_max Upper bound for rim offset, mm (e.g. &#x60;45&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Lower bound for centre bore value, mm (e.g. &#x60;55&#x60;) (optional)
     * @param  float $cb_max Upper bound for centre bore value, mm (e.g. &#x60;65&#x60;) (optional)
     * @param  string $lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn,zh-tw&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only (optional)
     * @param  string $brands Show information only for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Don&#39;t show information for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     * @param  string $countries Show information for local manufacturers from specified countries only. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;us,gb,jp&#x60;) (optional)
     * @param  string $countries_exclude Don&#39;t show information for local manufacturers from specified countries. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;ru,ua&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function boltPatternsReadAsyncWithHttpInfo($bolt_pattern, $rim_diameter = null, $rim_width = null, $offset = null, $offset_min = null, $offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $lang = null, $brands = null, $brands_exclude = null, $countries = null, $countries_exclude = null)
    {
        $returnType = '\WsApiClient\Model\MakeWithModels[]';
        $request = $this->boltPatternsReadRequest($bolt_pattern, $rim_diameter, $rim_width, $offset, $offset_min, $offset_max, $cb, $cb_min, $cb_max, $lang, $brands, $brands_exclude, $countries, $countries_exclude);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'boltPatternsRead'
     *
     * @param  string $bolt_pattern Bolt pattern combines number of stud holes and pitch circle diameter. Use _**&#x60;GET /bolt-patterns/&#x60;**_ to get possible values (e.g. &#x60;5x105&#x60;) (required)
     * @param  float $rim_diameter Rim diameter, in (e.g. &#x60;16&#x60;) (optional)
     * @param  float $rim_width Rim width, in (e.g. &#x60;7&#x60;) (optional)
     * @param  float $offset Rim offset, mm (e.g. &#x60;40&#x60;) (optional)
     * @param  float $offset_min Lower bound for rim offset, mm (e.g. &#x60;35&#x60;) (optional)
     * @param  float $offset_max Upper bound for rim offset, mm (e.g. &#x60;45&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Lower bound for centre bore value, mm (e.g. &#x60;55&#x60;) (optional)
     * @param  float $cb_max Upper bound for centre bore value, mm (e.g. &#x60;65&#x60;) (optional)
     * @param  string $lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn,zh-tw&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only (optional)
     * @param  string $brands Show information only for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Don&#39;t show information for specified manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     * @param  string $countries Show information for local manufacturers from specified countries only. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;us,gb,jp&#x60;) (optional)
     * @param  string $countries_exclude Don&#39;t show information for local manufacturers from specified countries. Use _**&#x60;GET /countries/&#x60;**_ method to get the full list of countries. (e.g. &#x60;ru,ua&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function boltPatternsReadRequest($bolt_pattern, $rim_diameter = null, $rim_width = null, $offset = null, $offset_min = null, $offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $lang = null, $brands = null, $brands_exclude = null, $countries = null, $countries_exclude = null)
    {
        // verify the required parameter 'bolt_pattern' is set
        if ($bolt_pattern === null || (is_array($bolt_pattern) && count($bolt_pattern) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bolt_pattern when calling boltPatternsRead'
            );
        }

        $resourcePath = '/bolt-patterns/{bolt_pattern}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rim_diameter !== null) {
            $queryParams['rim_diameter'] = ObjectSerializer::toQueryValue($rim_diameter);
        }
        // query params
        if ($rim_width !== null) {
            $queryParams['rim_width'] = ObjectSerializer::toQueryValue($rim_width);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($offset_min !== null) {
            $queryParams['offset_min'] = ObjectSerializer::toQueryValue($offset_min);
        }
        // query params
        if ($offset_max !== null) {
            $queryParams['offset_max'] = ObjectSerializer::toQueryValue($offset_max);
        }
        // query params
        if ($cb !== null) {
            $queryParams['cb'] = ObjectSerializer::toQueryValue($cb);
        }
        // query params
        if ($cb_min !== null) {
            $queryParams['cb_min'] = ObjectSerializer::toQueryValue($cb_min);
        }
        // query params
        if ($cb_max !== null) {
            $queryParams['cb_max'] = ObjectSerializer::toQueryValue($cb_max);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }
        // query params
        if ($brands !== null) {
            $queryParams['brands'] = ObjectSerializer::toQueryValue($brands);
        }
        // query params
        if ($brands_exclude !== null) {
            $queryParams['brands_exclude'] = ObjectSerializer::toQueryValue($brands_exclude);
        }
        // query params
        if ($countries !== null) {
            $queryParams['countries'] = ObjectSerializer::toQueryValue($countries);
        }
        // query params
        if ($countries_exclude !== null) {
            $queryParams['countries_exclude'] = ObjectSerializer::toQueryValue($countries_exclude);
        }

        // path params
        if ($bolt_pattern !== null) {
            $resourcePath = str_replace(
                '{' . 'bolt_pattern' . '}',
                ObjectSerializer::toPathValue($bolt_pattern),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        
        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
